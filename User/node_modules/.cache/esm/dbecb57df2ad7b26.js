let Joi,RefreshToken,User,CustomErrorHandler,bcrypt,JWTService,REFRESH_SECRET;_f2a‍.x([["default",()=>_f2a‍.o]]);_f2a‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_f2a‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_f2a‍.w("../../services/customErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_f2a‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_f2a‍.w("../../services/JwtService",[["default",["JWTService"],function(v){JWTService=v}]]);_f2a‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);







const logoutController = {

    async logout(req, res, next) {
        // [+] : Validate the Request
        _f2a‍.g.console.log("Data :", req.body);
        const refreshTokenSchema = Joi.object({
            refreshToken: Joi.string().required(),
        });
        const { error } = refreshTokenSchema.validate(req.body);
        if (error) {
            return next(error);
        }
        try {
            await RefreshToken.deleteOne({ token: req.body.refresh_token });
        } catch (err) {
            return next(new Error('Something went wrong in the database'));
        }

        res.json({ status: 1 });
    }
};

_f2a‍.d(logoutController);